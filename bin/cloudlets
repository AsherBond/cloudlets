#!/usr/bin/env python

import sys
import cloudlets
import simplejson as json

from cloudlets import cli

def main():
    commands = cli.load(globals())
    usage = "Usage: %s command [options]\n\nCommands:\n" + "\n".join(["\t" + cmd.usage.replace("\n", "\n\t") + "\t" for cmd in sorted(commands.values(), cmp=lambda x,y: cmp(x.name, y.name))])
    if len(sys.argv) < 2:
        print usage % sys.argv[0]
        sys.exit(1)
    (cmd, args) = (sys.argv[1], sys.argv[2:])
    if cmd not in commands:
        print "%s: not such command" % cmd
        print usage % sys.argv[0]     
        sys.exit(1)
    try:
        commands[sys.argv[1]](*sys.argv[2:])
    except cli.CLIException, e:
        print "Usage: %s %s" % (sys.argv[0], e)
        sys.exit(1)

@cli.command
def tar(image, config=None):
    """Wrap the image in an uncompressed tar archive and write it to stdout. Volatile files are ignored. """
    cloudlets.Image(image).tar(volatile=False, templates=True, persistent=True, other=True, config=config and json.loads(config))

@cli.command
def config(image, json_config=None):
    if json_config is None:
        config = cloudlets.Image(image).config
        if config != None:
            print json.dumps(config, indent=1)
    else:
        config = json.loads(json_config)
        print "Configuring image %s with:\n-------\n%s\n-------" % (image, json.dumps(config, indent=1))
        cloudlets.Image(image).config = config

@cli.command
def specs():
    """Output the specs for an image manifest, in jsonschema."""
    print json.dumps(cloudlets.Manifest.specs, indent=1)

@cli.command(
    image="Path to a cloudlet image",
    json_config="JSON-encoded configuration",
)
def validate(image, json_config=None):
    config = json.loads(json_config)
    print "Validating configuration for image %s with:\n-------\n%s\n-------" % (image, json.dumps(config, indent=1))
    cloudlets.Image(image).manifest.validate_config(config)

@cli.command(
    image="Path to a cloudlet image"
)
def manifest(image):
    print json.dumps(cloudlets.Image(image).manifest, indent=1)

@cli.command
def manifestfile(image):
    print cloudlets.Image(image).manifestfile

@cli.command
def schema(image):
    print json.dumps(cloudlets.Image(image).manifest.config_schema, indent=1)

@cli.command
def fs_volatile(image):
    for path in cloudlets.Image(image).find(volatile=True):
        print path

@cli.command
def fs_persistent(image):
    for path in cloudlets.Image(image).find(persistent=True):
        print path

@cli.command
def fs_templates(image):
    for path in cloudlets.Image(image).find(templates=True):
        print path

@cli.command
def find(image):
    for path in cloudlets.Image(image).find(volatile=False, templates=True, persistent=True, other=True):
        print path

if __name__ == "__main__":
    main()
