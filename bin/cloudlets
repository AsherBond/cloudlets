#!/usr/bin/env python

import os
import sys

import argparse
import cloudlets
import simplejson as json

parser = argparse.ArgumentParser(description="Manipulate server images in the cloudlets format.")
parser.add_argument("--manifest", help="Manifest file", default=None)
subcommands = parser.add_subparsers(dest="command")

def main():
    args = parser.parse_args()
    cmd = globals()["cmd_" + args.command]
    cmd(args)

parser_tar = subcommands.add_parser("tar", help="Wrap the image in an uncompressed tar archive and write it to stdout")
parser_tar.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_tar.add_argument("--out", metavar="TAR_FILE_PATH", type=argparse.FileType('w'), help="path to a tar file", default=sys.stdout)
parser_tar.add_argument("--config", metavar="JSON_CONFIG", help="Configure the output, leaving the source untouched", default=None)
parser_tar.add_argument("--only", nargs="+", choices=["templates","volatile","persistent","other"], default=["templates", "persistent", "other"])
def cmd_tar(args):
    filters = dict((key, key in args.only) for key in ["templates", "volatile", "persistent", "other"])
    config = json.loads(args.config) if args.config else None
    cloudlets.Image(args.image, args.manifest).tar(config=config, out=args.out, **filters)

parser_raw = subcommands.add_parser("raw", help="Create a raw image of the cloudlet")
parser_raw.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_raw.add_argument("out", metavar="RAW_IMAGE_PATH", help="path to a raw image")
parser_raw.add_argument("--config", metavar="JSON_CONFIG", help="Configure the output, leaving the source untouched")
parser_raw.add_argument("--size", metavar="RAW_IMAGE_SIZE", type=int, help="Size of the generated raw image", default=1024*1024*1024)
parser_raw.add_argument("--only", nargs="+", choices=["templates","volatile","persistent","other"], default=["templates", "persistent", "other"])
def cmd_raw(args):
    filters = dict((key, key in args.only) for key in ["templates", "volatile", "persistent", "other"])
    config = json.loads(args.config)
    cloudlets.Image(args.image, args.manifest).raw(args.out, config, args.size, **filters)

parser_ec2 = subcommands.add_parser("ec2", help="Create an ec2 image of the cloudlet")
parser_ec2.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_ec2.add_argument("out", metavar="EC2_BUNDLE_PATH", help="path for the new bundle")
parser_ec2.add_argument("--name", metavar="EC2_IMAGE_NAME", help="Name of the generated ec2 image", required=True)
parser_ec2.add_argument("--config", metavar="JSON_CONFIG", help="Configure the output, leaving the source untouched", default='{}')
parser_ec2.add_argument("--size", metavar="EC2_IMAGE_SIZE", type=int, help="Size of the generated ec2 image", default=1024*1024*1024)
parser_ec2.add_argument("--user", metavar="EC2_USER", help="ec2 username", default=os.environ.get('EC2_USER'))
parser_ec2.add_argument("--cert", metavar="EC2_CERT_PATH", help="path for the ec2 certificate", default=os.environ.get('EC2_CERT'))
parser_ec2.add_argument("--pk", metavar="EC2_PK_PATH", help="path for the ec2 private key", default=os.environ.get('EC2_PRIVATE_KEY'))
parser_ec2.add_argument("--kernel", metavar="EC2_AKI", help="ec2 kernel image (aki)", default='aki-b02a01c4')
parser_ec2.add_argument("--ramdisk", metavar="EC2_ARI", help="ec2 ramdisk image (ari)", default='ari-bc2a01c8')
parser_ec2.add_argument("--register", help="register image into ec2", action='store_true')
parser_ec2.add_argument("--access-key", metavar="S3_ACCESS_KEY", help="Access key for s3")
parser_ec2.add_argument("--secret-key", metavar="S3_SECRET_KEY", help="Secret key for s3")
parser_ec2.add_argument("--bucket", metavar="S3_BUCKET", help="s3 bucket name")
parser_ec2.add_argument("--region", metavar="EC2_REGION", help="ec2 region", default="us-east-1")
parser_ec2.add_argument("--only", nargs="+", choices=["templates","volatile","persistent","other"], default=["templates", "persistent", "other"])
def cmd_ec2(args):
    if os.path.exists(args.out):
        print >>sys.stderr, "File already exists: {0}".format(args.out)
        sys.exit(1)
    if args.register and not (getattr(args, 'access_key') and getattr(args, 'secret_key') and getattr(args, 'bucket')):
        print >>sys.stderr, "Access key, Secret key and bucket name are mandatory for register."
        sys.exit(1)
    filters = dict((key, key in args.only) for key in ["templates", "volatile", "persistent", "other"])
    config = json.loads(args.config)
    cloudlets.Image(args.image, args.manifest).ec2(args.out, args.name, config, args.size, args.user, args.cert, args.pk, args.kernel, args.ramdisk, args.register, args.access_key, args.secret_key, args.bucket, args.region, **filters)

parser_config = subcommands.add_parser("config", help="Configure an image in-place. If no configuration is given, show current configuration")
parser_config.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_config.add_argument("--config", metavar="JSON_CONFIG", help="Apply JSON_CONFIG to the image", default=None)
def cmd_config(args):
    if args.config is None:
        config = cloudlets.Image(args.image, args.manifest).config
        if config != None:
            print json.dumps(config, indent=1)
    else:
        config = json.loads(args.config)
        print "Configuring image %s with:\n-------\n%s\n-------" % (args.image, json.dumps(config, indent=1))
        cloudlets.Image(args.image, args.manifest).config = config

parser_specs = subcommands.add_parser("specs", help="Output the specs for an image manifest, in jsonschema")
def cmd_specs(args):
    print json.dumps(cloudlets.Manifest.specs, indent=1)

parser_validate = subcommands.add_parser("validate", help="Validate a configuration for an image")
parser_validate.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_validate.add_argument("--config", metavar="JSON_CONFIG", help="Apply JSON_CONFIG to the image", default=None)
def cmd_validate(args):
    try:
        config = json.loads(args.config)
        image = cloudlets.Image(args.image, args.manifest)
        print json.dumps(image.manifest.config_schema.validate(config))
    except ValueError, e:
        print e

parser_validate_args = subcommands.add_parser("validate_args", help="Validate user args for an image")
parser_validate_args.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_validate_args.add_argument("args", metavar="JSON ARGS", help="JSON user arguments", default=None)
def cmd_validate_args(args):
    try:
        user_args = json.loads(args.args)
        image = cloudlets.Image(args.image, args.manifest)
        print json.dumps(image.manifest.args_schema.validate(user_args), indent=1)
    except ValueError, e:
        print e

parser_manifest = subcommands.add_parser("manifest", help="Display an image's manifest")
parser_manifest.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
def cmd_manifest(args):
    print json.dumps(cloudlets.Image(args.image, args.manifest).manifest, indent=1)

parser_schema = subcommands.add_parser("schema", help="Display an image's configuration schema")
parser_schema.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
def cmd_schema(args):
    print json.dumps(cloudlets.Image(args.image, args.manifest).manifest.config_schema, indent=1)

parser_find = subcommands.add_parser("find", help="List the contents of an image, with optional filtering")
parser_find.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_find.add_argument("--only", nargs="+", choices=["templates","volatile","persistent","other"], default=["templates", "persistent", "other"])
def cmd_find(args):
    filters = dict((key, key in args.only) for key in ["templates", "volatile", "persistent", "other"])
    for path in cloudlets.Image(args.image, args.manifest).find(**filters):
        print path

parser_hg = subcommands.add_parser("hg", help="Run a mercurial command on an image")
parser_hg.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_hg.add_argument("hg_command", nargs="+", help="mercurial command")
def cmd_hg(args):
    cloudlets.Image(args.image, args.manifest).hg(*args.hg_command)

parser_overlay = subcommands.add_parser("overlay", help="Overlay a cloudlet on another")
parser_overlay.add_argument("image", metavar="IMAGE_PATH", help="path to the cloudlet image")
parser_overlay.add_argument("overlay", metavar="OVERLAY_PATH", help="path to the cloudlet overlay image")
def cmd_overlay(args):
    cloudlets.Image(args.image, args.manifest).overlay(args.overlay)

parser_chroot = subcommands.add_parser("chroot", help="Chroot inside the cloudlet image")
parser_chroot.add_argument("image", metavar="IMAGE_PATH", help="path to a cloudlet image")
parser_chroot.add_argument("chroot_command", nargs="*", help="chroot command")
def cmd_chroot(args):
    cloudlets.Image(args.image, args.manifest).chroot(*args.chroot_command)

if __name__ == "__main__":
    main()

